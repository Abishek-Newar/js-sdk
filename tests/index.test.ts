/**
 * JavaScript and Node.js SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://discord.gg/8naAwJfWN6
 * License: [Apache-2.0](https://github.com/openfga/js-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

import * as nock from "nock";

import {
  AuthorizationModel,
  CheckResponse,
  Configuration,
  CredentialsMethod,
  ErrorCode,
  ExpandResponse,
  FgaApiAuthenticationError,
  FgaApiInternalError,
  FgaApiNotFoundError,
  FgaApiRateLimitExceededError,
  FgaApiValidationError,
  OpenFgaApi,
  ListObjectsResponse,
  ReadAuthorizationModelResponse,
  ReadAuthorizationModelsResponse,
  ReadChangesResponse,
  ReadResponse,
  TupleKey,
  TupleOperation,
  UserConfigurationParams,
  WriteAuthorizationModelRequest,
} from "../index";
import { CallResult } from "../common";
import { GetDefaultRetryParams } from "../configuration";
import { AuthCredentialsConfig } from "../credentials";

nock.disableNetConnect();

const OPENFGA_STORE_ID = "test-random-store-id";
const OPENFGA_API_HOST = "api.fga.example";
const OPENFGA_API_TOKEN_ISSUER = "tokenissuer.fga.example";
const OPENFGA_API_AUDIENCE = "https://api.fga.example/";
const OPENFGA_CLIENT_ID = "some-random-id";
const OPENFGA_CLIENT_SECRET = "this-is-very-secret";
const OPENFGA_API_TOKEN = "fga_abcdef";

const baseConfig: UserConfigurationParams = {
  storeId: OPENFGA_STORE_ID,
  apiHost: OPENFGA_API_HOST,
  credentials: {
    method: CredentialsMethod.ClientCredentials,
    config: {
      apiTokenIssuer: OPENFGA_API_TOKEN_ISSUER,
      apiAudience: OPENFGA_API_AUDIENCE,
      clientId: OPENFGA_CLIENT_ID,
      clientSecret: OPENFGA_CLIENT_SECRET,
    }
  }
};

const defaultConfiguration = new Configuration(baseConfig);

const nocks = {
  tokenExchange: (
    apiTokenIssuer: string,
    accessToken = "test-token",
    expiresIn = 300
  ) => {
    return nock(`https://${apiTokenIssuer}`).post("/oauth/token").reply(200, {
      access_token: accessToken,
      expires_in: expiresIn,
    });
  },
  readAuthorizationModels: (
    storeId: string,
    basePath = defaultConfiguration.getBasePath(),
  ) => {
    return nock(basePath)
      .get(`/stores/${storeId}/authorization-models`)
      .reply(200, {
        configurations: [],
      } as ReadAuthorizationModelsResponse);
  },
  check: (
    storeId: string,
    tuple: TupleKey,
    basePath = defaultConfiguration.getBasePath(),
  ) => {
    return nock(basePath)
      .post(`/stores/${storeId}/check`)
      .reply(200, {
        allowed: true,
      } as CheckResponse);
  },
  write: (
    storeId: string,
    tuple: TupleKey,
    basePath = defaultConfiguration.getBasePath(),
  ) => {
    return nock(basePath)
      .post(`/stores/${storeId}/write`)
      .reply(200, {} as Promise<object>);
  },
  delete: (
    storeId: string,
    tuple: TupleKey,
    basePath = defaultConfiguration.getBasePath(),
  ) => {
    return nock(basePath)
      .post(`/stores/${storeId}/write`)
      .reply(200, {} as Promise<object>);
  },
  read: (
    storeId: string,
    tuple: TupleKey,
    basePath = defaultConfiguration.getBasePath(),
  ) => {
    return nock(basePath)
      .post(`/stores/${storeId}/read`)
      .reply(200, { tuples: [] } as ReadResponse);
  },
  expand: (
    storeId: string,
    tuple: TupleKey,
    basePath = defaultConfiguration.getBasePath(),
  ) => {
    return nock(basePath)
      .post(`/stores/${storeId}/expand`)
      .reply(200, { tree: {} } as ExpandResponse);
  },
  readSingleAuthzModel: (
    storeId: string,
    configId: string,
    basePath = defaultConfiguration.getBasePath(),
  ) => {
    return nock(basePath)
      .get(`/stores/${storeId}/authorization-models/${configId}`)
      .reply(200, {
        configuration: { id: "some-id", type_definitions: [] },
      } as AuthorizationModel);
  },
  writeAuthorizationModel: (
    storeId: string,
    configurations: WriteAuthorizationModelRequest,
    basePath = defaultConfiguration.getBasePath(),
  ) => {
    return nock(basePath)
      .post(`/stores/${storeId}/authorization-models`)
      .reply(200, {
        id: "some-new-id",
      } as ReadAuthorizationModelResponse);
  },
  readChanges: (storeId: string, type: string, pageSize: number, contToken: string, basePath = defaultConfiguration.getBasePath()) => {
    return nock(basePath)
      .get(`/stores/${storeId}/changes`)
      .query({
        type,
        page_size: pageSize,
        continuation_token: contToken
      })
      .reply(200, {
        changes: [{
          tuple_key: {
            user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
            relation: "viewer",
            object: "document:roadmap"
          },
          operation: TupleOperation.Write,
          timestamp: "2000-01-01T00:00:00Z"
        }],
        "continuation_token": "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="
      } as ReadChangesResponse);
  },
  listObjects: (storeId: string, responseBody: ListObjectsResponse, basePath = defaultConfiguration.getBasePath()) => {
    return nock(basePath)
      .post(`/stores/${storeId}/list-objects`)
      .reply(200, responseBody);
  },
};

describe("OpenFga SDK", function () {
  describe("initializing the sdk", () => {
    it("should not require storeId in configuration", () => {
      expect(
        () => new OpenFgaApi({ ...baseConfig, storeId: undefined! })
      ).not.toThrowError();
    });

    it("should require storeId when calling endpoints that require it", () => {
      const openFgaApi = new OpenFgaApi({ ...baseConfig, storeId: undefined!, credentials: undefined! });
      expect(
        openFgaApi.readAuthorizationModels()
      ).rejects.toThrow();
    });

    it("should require host in configuration", () => {
      expect(
        () => new OpenFgaApi({ ...baseConfig, apiHost: undefined! })
      ).toThrowError();
    });

    it("should validate host in configuration (adding scheme as part of the host)", () => {
      expect(
        () => new OpenFgaApi({ ...baseConfig, apiHost: "https://api.fga.example" })
      ).toThrowError();
    });

    it("should validate apiTokenIssuer in configuration (should not allow scheme as part of the apiTokenIssuer)", () => {
      expect(
        () => new OpenFgaApi({
          ...baseConfig,
          credentials: {
            method: CredentialsMethod.ClientCredentials,
            config: {
              ...(baseConfig.credentials as any).config,
              apiTokenIssuer: "https://tokenissuer.fga.example"
            }
          } as Configuration["credentials"]
        })
      ).toThrowError();
    });

    it("should not require credentials in configuration when not needed", () => {
      expect(
        () =>
          new OpenFgaApi({
            storeId: baseConfig.storeId!,
            apiHost: baseConfig.apiHost,
          })
      ).not.toThrowError();
    });

    it("should require apiToken credentials in configuration in api_token flow", () => {
      expect(
        () =>
          new OpenFgaApi({
            storeId: baseConfig.storeId!,
            apiHost: baseConfig.apiHost,
            credentials: {
              method: CredentialsMethod.ApiToken as any
            }
          })
      ).toThrowError();
    });

    it("should require clientId, clientSecret, apiTokenIssuer and apiAudience credentials in configuration in client_credentials flow", () => {
      expect(
        () =>
          new OpenFgaApi({
            ...baseConfig,
            credentials: {
              method: CredentialsMethod.ClientCredentials,
            } as AuthCredentialsConfig,
          })
      ).toThrowError();

      expect(
        () =>
          new OpenFgaApi({
            ...baseConfig,
            credentials: {
              method: CredentialsMethod.ClientCredentials,
              config: {
                ...(baseConfig.credentials as any)!.config,
                clientId: undefined!
              }
            } as Configuration["credentials"]
          })
      ).toThrowError();

      expect(
        () =>
          new OpenFgaApi({
            ...baseConfig,
            credentials: {
              method: CredentialsMethod.ClientCredentials,
              config: {
                ...(baseConfig.credentials as any)!.clientCredentials,
                clientSecret: undefined!
              }
            } as Configuration["credentials"]
          })
      ).toThrowError();

      expect(
        () =>
          new OpenFgaApi({
            ...baseConfig,
            credentials: {
              method: CredentialsMethod.ClientCredentials,
              config: {
                ...(baseConfig.credentials as any)!.config,
                apiAudience: undefined!
              }
            } as Configuration["credentials"]
          })
      ).toThrowError();

      expect(
        () =>
          new OpenFgaApi({
            ...baseConfig,
            credentials: {
              method: CredentialsMethod.ClientCredentials,
              config: {
                ...(baseConfig.credentials as any)!.config,
                apiTokenIssuer: undefined!
              }
            } as Configuration["credentials"]
          })
      ).toThrowError();
    });

    it("should issue a network call to get the token at the first request if client id is provided", async () => {
      const scope = nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER);
      nocks.readAuthorizationModels(baseConfig.storeId!);

      const openFgaApi = new OpenFgaApi(baseConfig);
      expect(scope.isDone()).toBe(false);

      await openFgaApi.readAuthorizationModels();

      expect(scope.isDone()).toBe(true);

      nock.cleanAll();
    });

    it("should not issue a network call to get the token at the first request if the clientId is not provided", async () => {
      const scope = nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER);
      nocks.readAuthorizationModels(baseConfig.storeId!);

      const openFgaApi = new OpenFgaApi({
        storeId: baseConfig.storeId!,
        apiHost: baseConfig.apiHost,
      });
      expect(scope.isDone()).toBe(false);

      await openFgaApi.readAuthorizationModels();

      expect(scope.isDone()).toBe(false);

      nock.cleanAll();
    });

    it("should allow passing in a configuration instance", async () => {
      const configuration = new Configuration(baseConfig);
      expect(() => new OpenFgaApi(configuration)).not.toThrowError();
    });

    it("should allow updating the storeId after initialization", async () => {
      const openFgaApi = new OpenFgaApi({
        apiHost: OPENFGA_API_HOST
      });
      expect(openFgaApi.storeId).toBe(undefined);
      openFgaApi.storeId = OPENFGA_STORE_ID;
      expect(openFgaApi.storeId).toBe(OPENFGA_STORE_ID);
    });
  });

  describe("error handling", () => {
    let openFgaApi: OpenFgaApi;
    const { storeId } = baseConfig;
    const basePath = defaultConfiguration.getBasePath();
    const requestId = "1F2A3B";

    beforeAll(() => {
      openFgaApi = new OpenFgaApi({ ...baseConfig });
    });

    describe("400 level error should result in FgaApiValidationError", () => {
      const tupleKey = {
        object: "foobar:x",
        user: "user:xyz",
      };

      beforeEach(async () => {
        nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER, "test-token");

        nock(basePath)
          .defaultReplyHeaders({
            "Fga-Request-Id": requestId,
            "Content-Type": "application/json",
          })
          .post(
            `/stores/${storeId}/check`,
            {
              tuple_key: tupleKey,
            },
            expect.objectContaining({ Authorization: "Bearer test-token" })
          )
          .reply(400, {
            code: "validation_error",
            message: "nock error",
          });
      });

      afterEach(() => {
        nock.cleanAll();
      });

      it("should throw FgaApiValidationError", async () => {
        await expect(
          openFgaApi.check({ tuple_key: tupleKey })
        ).rejects.toThrow(FgaApiValidationError);
      });

      it("FgaApiValidationError should have correct fields", async () => {
        try {
          await openFgaApi.check({ tuple_key: tupleKey });
        } catch (err) {
          expect(err).toBeInstanceOf(FgaApiValidationError);
          if (err instanceof FgaApiValidationError) {
            expect(err.apiErrorCode).toBe(ErrorCode.ValidationError);
            expect(err.storeId).toBe(storeId);
            expect(err.endpointCategory).toBe("check");
            expect(err.requestId).toBe(requestId);
          }
        }
      });
    });

    describe("429 level error should result in FgaApiRateLimitExceededError", () => {
      const tupleKey = {
        object: "foobar:x",
        user: "user:xyz",
      };

      beforeEach(async () => {
        const updateBaseConfig = {
          ...baseConfig,
          retryParams: GetDefaultRetryParams(2, 10),
        };
        openFgaApi = new OpenFgaApi({ ...updateBaseConfig });
        nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER, "test-token");

        nock(basePath)
          .post(
            `/stores/${storeId}/check`,
            {
              tuple_key: tupleKey,
            },
            expect.objectContaining({ Authorization: "Bearer test-token" })
          )
          .times(3)
          .reply(429, {
            code: "rate_limit_exceeded",
            message: "nock error",
          });
      });

      afterEach(() => {
        nock.cleanAll();
      });

      it("should throw FgaApiRateLimitExceededError", async () => {
        await expect(
          openFgaApi.check({ tuple_key: tupleKey }, {})
        ).rejects.toThrow(FgaApiRateLimitExceededError);
      });
    });

    describe("429 with retry in config and retry is successful", () => {
      const tupleKey = {
        object: "foobar:x",
        user: "user:xyz",
      };

      beforeEach(async () => {
        const updateBaseConfig = {
          ...baseConfig,
          retryParams: GetDefaultRetryParams(2, 10),
        };
        openFgaApi = new OpenFgaApi({ ...updateBaseConfig });

        nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER, "test-token");

        nock(basePath)
          .post(
            `/stores/${storeId}/check`,
            {
              tuple_key: tupleKey,
            },
            expect.objectContaining({ Authorization: "Bearer test-token" })
          )
          .times(1)
          .reply(429, {
            code: "rate_limit_exceeded",
            message: "nock error",
          });

        nocks.check(baseConfig.storeId!, tupleKey);
      });

      afterEach(() => {
        nock.cleanAll();
      });

      it("should return allowed", async () => {
        const result = await openFgaApi.check({ tuple_key: tupleKey, authorization_model_id: "1uHxCSuTP0VKPYSnkq1pbb1jeZw"}, {});

        expect(result.allowed).toBe(true);
      });
    });

    describe("429 with retry in call and retry is successful", () => {
      const tupleKey = {
        object: "foobar:x",
        user: "user:xyz",
      };

      beforeEach(async () => {
        nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER, "test-token");

        nock(basePath)
          .post(
            `/stores/${storeId}/check`,
            {
              tuple_key: tupleKey,
            },
            expect.objectContaining({ Authorization: "Bearer test-token" })
          )
          .times(1)
          .reply(429, {
            code: "rate_limit_exceeded",
            message: "nock error",
          });

        nocks.check(baseConfig.storeId!, tupleKey);
      });

      afterEach(() => {
        nock.cleanAll();
      });

      it("should return allowed", async () => {
        const result = await openFgaApi.check(
          { tuple_key: tupleKey },
          { retryParams: GetDefaultRetryParams(2, 10) }
        );

        expect(result.allowed).toBe(true);
      });
    });

    describe("500 level error should result in FgaApiInternalError", () => {
      const tupleKey = {
        object: "foobar:x",
        user: "user:xyz",
      };

      beforeEach(async () => {
        nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER, "test-token");

        nock(basePath)
          .post(
            `/stores/${storeId}/check`,
            {
              tuple_key: tupleKey,
            },
            expect.objectContaining({ Authorization: "Bearer test-token" })
          )
          .reply(500, {
            code: "internal_error",
            message: "nock error",
          });
      });

      afterEach(() => {
        nock.cleanAll();
      });

      it("should throw FgaApiInternalError", async () => {
        await expect(
          openFgaApi.check({ tuple_key: tupleKey })
        ).rejects.toThrow(FgaApiInternalError);
      });
    });

    describe("404 level error should result in FgaApiNotFoundError", () => {
      const tupleKey = {
        object: "foobar:x",
        user: "user:xyz",
      };

      beforeEach(async () => {
        nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER, "test-token");

        nock(basePath)
          .post(
            `/stores/${storeId}/check`,
            {
              tuple_key: tupleKey,
            },
            expect.objectContaining({ Authorization: "Bearer test-token" })
          )
          .reply(404, {
            code: "undefined_endpoint",
            message: "nock error",
          });
      });

      afterEach(() => {
        nock.cleanAll();
      });

      it("should throw FgaApiNotFoundError", async () => {
        await expect(
          openFgaApi.check({ tuple_key: tupleKey })
        ).rejects.toThrow(FgaApiNotFoundError);
      });
    });

    describe("401 during authentication should result in FgaApiAuthenticationError", () => {
      const tupleKey = {
        object: "foobar:x",
        user: "user:xyz",
      };

      beforeEach(async () => {
        nock(`https://${ OPENFGA_API_TOKEN_ISSUER}`)
          .post("/oauth/token")
          .reply(401);

        nock(basePath)
          .post(
            `/stores/${storeId}/check`,
            {
              tuple_key: tupleKey,
            },
            expect.objectContaining({ Authorization: "Bearer test-token" })
          )
          .reply(500, {
            code: "invalid_claims",
            message: "nock error",
          });
      });

      afterEach(() => {
        nock.cleanAll();
      });

      it("should throw FgaApiAuthenticationError", async () => {
        openFgaApi = new OpenFgaApi({ ...baseConfig });
        await expect(
          openFgaApi.check({ tuple_key: tupleKey })
        ).rejects.toThrow(FgaApiAuthenticationError);
      });
    });
  });

  describe("happy path of CHECK", () => {
    let result: CallResult<CheckResponse>;
    let openFgaApi: OpenFgaApi;

    beforeAll(async () => {
      openFgaApi = new OpenFgaApi({ ...baseConfig });
      nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER);

      const tupleKey = {
        user: "user:xyz",
        relation: "abc",
        object: "foobar:x",
      };
      const scope = nocks.check(baseConfig.storeId!, tupleKey);
      expect(scope.isDone()).toBe(false);

      result = await openFgaApi.check({ tuple_key: tupleKey });
      expect(scope.isDone()).toBe(true);

      nock.cleanAll();
    });

    it("should return allowed", () => {
      expect(result.allowed).toBe(true);
    });

    it("should return the proper $response object", () => {
      expect(result).toHaveProperty("$response");
      expect(result.$response.status).toBe(200);
      expect(
        Object.prototype.propertyIsEnumerable.call(result, "$response")
      ).toBe(false);
    });
  });

  describe("using the sdk", () => {
    let openFgaApi: OpenFgaApi;

    beforeAll(() => {
      openFgaApi = new OpenFgaApi({ ...baseConfig });
    });

    beforeEach(() => {
      nocks.tokenExchange(OPENFGA_API_TOKEN_ISSUER);
    });

    afterEach(() => {
      nock.cleanAll();
    });

    describe("check", () => {
      it("should properly pass the request and return an allowed API response", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.check(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await openFgaApi.check({ tuple_key: tuple });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({ allowed: expect.any(Boolean) });
      });
    });

    describe("write: write tuples", () => {
      it("should properly pass the errors that the OpenFGA API returns", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.write(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await openFgaApi.write({
          writes: { tuple_keys: [tuple] },
          authorization_model_id: "1uHxCSuTP0VKPYSnkq1pbb1jeZw",
        });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({});
      });
    });

    describe("write: delete tuples", () => {
      it("should properly pass the errors that the OpenFGA API returns", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.delete(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await openFgaApi.write({
          deletes: { tuple_keys: [tuple] },
          authorization_model_id: "1uHxCSuTP0VKPYSnkq1pbb1jeZw",
        });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({});
      });
    });

    describe("expand", () => {
      it("should properly pass the errors that the OpenFGA API returns", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.expand(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await openFgaApi.expand({ tuple_key: tuple, authorization_model_id: "1uHxCSuTP0VKPYSnkq1pbb1jeZw"});

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({});
      });
    });

    describe("read", () => {
      it("should properly pass the errors that the OpenFGA API returns", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.read(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await openFgaApi.read({ tuple_key: tuple });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({});
      });
    });

    describe("writeAuthorizationModel", () => {
      it("should call the api and return the response", async () => {
        const authorizationModel = {
          type_definitions: [
            { type: "workspace", relations: { admin: { this: {} } } },
          ],
        };
        const scope = nocks.writeAuthorizationModel(
          baseConfig.storeId!,
          authorizationModel
        );

        expect(scope.isDone()).toBe(false);
        const data = await openFgaApi.writeAuthorizationModel(
          authorizationModel
        );

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({ id: expect.any(String) });
      });
    });

    describe("readAuthorizationModel", () => {
      it("should call the api and return the response", async () => {
        const configId = "string";
        const scope = nocks.readSingleAuthzModel(baseConfig.storeId!, configId);

        expect(scope.isDone()).toBe(false);
        const data = await openFgaApi.readAuthorizationModel(configId);

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({
          configuration: {
            id: expect.any(String),
            type_definitions: expect.arrayContaining([]),
          },
        });
      });
    });

    describe("readAuthorizationModels", () => {
      it("should call the api and return the response", async () => {
        const scope = nocks.readAuthorizationModels(baseConfig.storeId!);

        expect(scope.isDone()).toBe(false);
        const data = await openFgaApi.readAuthorizationModels();

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({
          configurations: expect.arrayContaining([]),
        });
      });
    });

    describe("readChanges", () => {
      it("should call the api and return the response", async () => {
        const type = "repo";
        const pageSize = 25;
        const continuationToken = "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==";

        const scope = nocks.readChanges(baseConfig.storeId!, type, pageSize, continuationToken);

        expect(scope.isDone()).toBe(false);
        const response = await openFgaApi.readChanges(type, pageSize, continuationToken);

        expect(scope.isDone()).toBe(true);
        expect(response).toMatchObject({ changes: expect.arrayContaining([]) });
      });
    });

    describe("listObjects", () => {
      it("should call the api and return the response", async () => {
        const mockedResponse = { objects: ["document:roadmap"] };
        const scope = nocks.listObjects(baseConfig.storeId!, mockedResponse);

        expect(scope.isDone()).toBe(false);
        const response = await openFgaApi.listObjects({
          authorization_model_id: "01GAHCE4YVKPQEKZQHT2R89MQV",
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "can_read",
          type: "document",
          contextual_tuples: {
            tuple_keys:
              [{
                user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
                relation: "editor",
                object: "folder:product"
              }, {
                user: "folder:product",
                relation: "parent",
                object: "document:roadmap"
              }]
          }
        });

        expect(scope.isDone()).toBe(true);
        expect(response.objects).toHaveLength(mockedResponse.objects.length);
        expect(response.objects).toEqual(expect.arrayContaining(mockedResponse.objects));
      });
    });
  });
});
